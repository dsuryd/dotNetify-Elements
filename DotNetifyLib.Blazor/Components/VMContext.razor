@using DotNetify.Blazor
@using System.Linq
@using Microsoft.AspNetCore.Components
@implements IDisposable
@typeparam TState
@inject IVMProxy vm

<d-vm-context ref="vm.ElementRef" vm="@VM">
    @ChildContent
</d-vm-context>

@functions {
    [Parameter] protected string VM { get; set; }
    [Parameter] protected RenderFragment ChildContent { get; set; }
    [Parameter] protected Action<TState> OnStateChanged { get; set; }

    private readonly string[] DomSelectorPrefixes = new string[] { "#", ".", "[" };

    protected override async Task OnAfterRenderAsync()
    {
        await vm.HandleStateChangedAsync<TState>(state => OnStateChanged?.Invoke(state));
    }

    public void Dispose()
    {
        vm.Dispose();
    }

    public async Task DispatchAsync(string propertyName, object propertyValue = null)
    {
        await vm.DispatchAsync(propertyName, propertyValue);
    }

    public void HandleEvent(ElementRef elementRef, string eventName, Action eventHandler)
    {
        vm.HandleDomEventAsync<object>(eventName, elementRef, e => eventHandler?.Invoke());
    }

    public void HandleEvent<TEventArg>(ElementRef elementRef, string eventName, Action<TEventArg> eventHandler)
    {
        vm.HandleDomEventAsync<TEventArg>(eventName, elementRef, e => eventHandler?.Invoke(e));
    }
}